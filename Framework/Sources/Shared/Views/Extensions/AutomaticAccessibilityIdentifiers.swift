import Foundation
import SwiftUI

// MARK: - Accessibility Identifier Configuration

/// Global configuration for automatic accessibility identifier generation
@MainActor
public class AccessibilityIdentifierConfig: ObservableObject {
    
    // MARK: - Singleton
    
    public static let shared = AccessibilityIdentifierConfig()
    
    // MARK: - Published Properties
    
    /// Whether automatic accessibility identifiers are enabled
    @Published public var enableAutoIDs: Bool = true
    
    /// Global namespace for generated identifiers
    @Published public var namespace: String = "app"
    
    /// Generation mode for identifiers
    @Published public var mode: AccessibilityIdentifierMode = .automatic
    
    /// Whether to enable DEBUG collision detection
    @Published public var enableCollisionDetection: Bool = true
    
    /// Whether to enable DEBUG logging of generated IDs
    @Published public var enableDebugLogging: Bool = false
    
    // MARK: - Private Properties
    
    private var generatedIDs: Set<String> = []
    
    /// DEBUG: Log of all generated IDs with context
    public var generatedIDsLog: [(id: String, context: String, timestamp: Date)] = []
    
    // MARK: - Initialization
    
    private init() {
        // Private initializer for singleton
    }
    
    // MARK: - Public Methods
    
    /// Reset configuration to defaults
    public func resetToDefaults() {
        enableAutoIDs = true
        namespace = "app"
        mode = .automatic
        enableCollisionDetection = true
        enableDebugLogging = false
        generatedIDs.removeAll()
        generatedIDsLog.removeAll()
    }
    
    /// Check if an ID has been generated before (collision detection)
    public func checkForCollision(_ id: String) -> Bool {
        guard enableCollisionDetection else { return false }
        // Only report collision if the ID was generated by a different object/context
        // For now, we'll just check if it exists - in a more sophisticated implementation
        // we could track the source of each ID to detect actual conflicts
        return generatedIDs.contains(id)
    }
    
    /// Register a generated ID for collision detection
    public func registerGeneratedID(_ id: String) {
        guard enableCollisionDetection else { return }
        generatedIDs.insert(id)
    }
    
    /// Clear all registered IDs (useful for testing)
    public func clearRegisteredIDs() {
        generatedIDs.removeAll()
    }
    
    // MARK: - DEBUG Methods
    
    /// Log a generated ID with context for debugging
    public func logGeneratedID(_ id: String, context: String) {
        guard enableDebugLogging else { return }
        
        let logEntry = (id: id, context: context, timestamp: Date())
        generatedIDsLog.append(logEntry)
        
        #if DEBUG
        print("🔍 Accessibility ID Generated: '\(id)' for \(context)")
        #endif
    }
    
    /// Get all generated IDs as a formatted string for debugging
    public func getDebugLog() -> String {
        guard !generatedIDsLog.isEmpty else {
            return "No accessibility identifiers generated yet."
        }
        
        let formatter = DateFormatter()
        formatter.dateFormat = "HH:mm:ss.SSS"
        
        let logEntries = generatedIDsLog.map { entry in
            "\(formatter.string(from: entry.timestamp)) - \(entry.id) (\(entry.context))"
        }
        
        return "Generated Accessibility Identifiers:\n" + logEntries.joined(separator: "\n")
    }
    
    /// Print debug log to console
    public func printDebugLog() {
        print(getDebugLog())
    }
    
    /// Clear debug log
    public func clearDebugLog() {
        generatedIDsLog.removeAll()
    }
}

// MARK: - Accessibility Identifier Mode

/// Generation mode for accessibility identifiers
public enum AccessibilityIdentifierMode: String, CaseIterable {
    case automatic = "automatic"
    case semantic = "semantic"
    case minimal = "minimal"
    
    public var description: String {
        switch self {
        case .automatic:
            return "Full automatic generation with namespace, context, role, and object identity"
        case .semantic:
            return "Semantic generation focusing on meaningful identifiers"
        case .minimal:
            return "Minimal generation with basic object identity only"
        }
    }
}

// MARK: - Accessibility Identifier Generator

/// Generates deterministic accessibility identifiers based on object identity and context
@MainActor
public struct AccessibilityIdentifierGenerator {
    
    // MARK: - Public Methods
    
    /// Generate an accessibility identifier for an Identifiable object
    public func generateID<T: Identifiable>(
        for object: T,
        role: String,
        context: String
    ) -> String {
        let config = AccessibilityIdentifierConfig.shared
        
        guard config.enableAutoIDs else {
            return ""
        }
        
        let identifier = buildIdentifier(
            namespace: config.namespace,
            context: context,
            role: role,
            objectID: String(describing: object.id)
        )
        
        // Register for collision detection
        config.registerGeneratedID(identifier)
        
        // Log for debugging
        config.logGeneratedID(identifier, context: "Identifiable(\(String(describing: object.id)))")
        
        return identifier
    }
    
    /// Generate an accessibility identifier for a non-Identifiable object
    public func generateID(
        for object: Any,
        role: String,
        context: String
    ) -> String {
        let config = AccessibilityIdentifierConfig.shared
        
        guard config.enableAutoIDs else {
            return ""
        }
        
        let objectID = generateObjectID(for: object)
        let identifier = buildIdentifier(
            namespace: config.namespace,
            context: context,
            role: role,
            objectID: objectID
        )
        
        // Register for collision detection
        config.registerGeneratedID(identifier)
        
        // Log for debugging
        config.logGeneratedID(identifier, context: "Any(\(String(describing: type(of: object))))")
        
        return identifier
    }
    
    /// Check if an identifier would cause a collision
    public func checkForCollision(_ identifier: String) -> Bool {
        return AccessibilityIdentifierConfig.shared.checkForCollision(identifier)
    }
    
    // MARK: - Private Methods
    
    private func buildIdentifier(
        namespace: String,
        context: String,
        role: String,
        objectID: String
    ) -> String {
        let config = AccessibilityIdentifierConfig.shared
        
        switch config.mode {
        case .automatic:
            return "\(namespace).\(context).\(role).\(objectID)"
        case .semantic:
            return "\(namespace).\(role).\(objectID)"
        case .minimal:
            return "\(objectID)"
        }
    }
    
    private func generateObjectID(for object: Any) -> String {
        // Try to extract meaningful identifier from object
        if let string = object as? String {
            return sanitizeID(string)
        } else if let number = object as? NSNumber {
            return "\(number)"
        } else if let array = object as? [Any], !array.isEmpty {
            return "array-\(array.count)"
        } else if let dict = object as? [String: Any], !dict.isEmpty {
            return "dict-\(dict.count)"
        } else {
            // Fallback to type name and hash
            let typeName = String(describing: type(of: object))
            let hash = abs(ObjectIdentifier(object as AnyObject).hashValue)
            return "\(typeName)-\(hash)"
        }
    }
    
    private func sanitizeID(_ id: String) -> String {
        // Remove or replace characters that might cause issues in accessibility identifiers
        return id
            .replacingOccurrences(of: " ", with: "-")
            .replacingOccurrences(of: ".", with: "-")
            .replacingOccurrences(of: "/", with: "-")
            .replacingOccurrences(of: "\\", with: "-")
            .replacingOccurrences(of: ":", with: "-")
            .replacingOccurrences(of: ";", with: "-")
            .replacingOccurrences(of: ",", with: "-")
            .lowercased()
    }
}

// MARK: - View Extensions

public extension View {
    
    /// Apply automatic accessibility identifiers to this view
    func automaticAccessibilityIdentifiers() -> some View {
        self.modifier(AutomaticAccessibilityIdentifierModifier())
    }
    
    /// Disable automatic accessibility identifiers for this specific view
    func disableAutomaticAccessibilityIdentifiers() -> some View {
        self.modifier(DisableAutomaticAccessibilityIdentifierModifier())
    }
}

// MARK: - Automatic Accessibility Identifier Modifier

/// Modifier that automatically applies accessibility identifiers to views
public struct AutomaticAccessibilityIdentifierModifier: ViewModifier {
    
    public func body(content: Content) -> some View {
        content
            .modifier(AccessibilityIdentifierAssignmentModifier())
    }
}

// MARK: - Disable Automatic Accessibility Identifier Modifier

/// Modifier that disables automatic accessibility identifiers for a specific view
public struct DisableAutomaticAccessibilityIdentifierModifier: ViewModifier {
    
    public func body(content: Content) -> some View {
        content
            .environment(\.disableAutomaticAccessibilityIdentifiers, true)
    }
}

// MARK: - Accessibility Identifier Assignment Modifier

/// Internal modifier that handles the actual ID assignment
@MainActor
public struct AccessibilityIdentifierAssignmentModifier: ViewModifier {
    
    @Environment(\.disableAutomaticAccessibilityIdentifiers) private var disableAutoIDs
    
    public func body(content: Content) -> some View {
        if !disableAutoIDs && AccessibilityIdentifierConfig.shared.enableAutoIDs {
            // Apply automatic identifier based on view context
            // This is a simplified implementation - in practice, we'd need to
            // analyze the view hierarchy and content to generate appropriate IDs
            content
                .accessibilityIdentifier(generateAutomaticID())
        } else {
            content
        }
    }
    
    private func generateAutomaticID() -> String {
        let generator = AccessibilityIdentifierGenerator()
        let id = generator.generateID(
            for: "view",
            role: "element",
            context: "ui"
        )
        
        // Additional logging for view-level assignment
        let config = AccessibilityIdentifierConfig.shared
        config.logGeneratedID(id, context: "ViewModifier")
        
        return id
    }
}

// MARK: - Environment Key

/// Environment key for disabling automatic accessibility identifiers
public struct DisableAutomaticAccessibilityIdentifiersKey: EnvironmentKey {
    public static let defaultValue: Bool = false
}

public extension EnvironmentValues {
    var disableAutomaticAccessibilityIdentifiers: Bool {
        get { self[DisableAutomaticAccessibilityIdentifiersKey.self] }
        set { self[DisableAutomaticAccessibilityIdentifiersKey.self] = newValue }
    }
}
